context NamedElement {
	constraint NameNotEmpty {
		
		check: self.name.isTypeOf(String) and self.name.matches("[^\\s]+.*")
		
		message: 	"Please ensure that all objects of type " 
					+ self.type().name + "are not blank. In addition ensure "+ 
					"that none of these names starts with whitespace."
	} 
}

context Recipe {
	
	critique NameCapitalisation {
	
		guard: self.satisfies("NameNotEmpty")
		
		check { 
			for (part : String in self.name.split(" ")) {
				if (part.firstToUpperCase().charAt(0) <> part.charAt(0))
				{
					return false;
				}
			}
			return true;
		 }
		 
		 fix {
		 	title: "Correcting Capitalisation"
		 	
		 	do {
		 		var new_string = "";
		 		var string_elements = self.name.split(" ");
		 		for (element : String in string_elements){
		 			new_string = new_string + element.firstToUpperCase() + " ";
		 		}
		 		self.name = new_string.trim();
		 	}
		 }
	}
}

context Category {

	constraint UniqueName {
	
		guard: self.satisfies("NameNotEmpty")
	
		check: not Category.all().excluding(self).exists(
		c: Category | c.name = self.name)
		
		message: "Categories cannot have duplicated names. Please rename one " 
		+ "of the \"" + self.name + "\" categories to something else."
	
	}

}

context Ingredient {

	constraint NonZeroQuantities {
	
		check: self.amount.amount > 0
		
		message: "\"" + self.name + "\" cannot be included in the \"" 
		+ Recipe.all().selectOne(r: Recipe|r.ingredients.includes(self)).name +
		"\" recipe if it contains 0 " + self.amount.unit + 
		". Please change this to an amount strictly " + 
		"greater than 0."	
	}
}